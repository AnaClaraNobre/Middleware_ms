name: Deploy Middleware Microservice

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código do Middleware
        uses: actions/checkout@v3

      - name: Clonar repositório do Product
        run: git clone https://github.com/angelodrigues/ecommerce_product.git ../ecommerce_product

      - name: Clonar repositório do Order
        run: git clone https://github.com/angelodrigues/ecommerce_orders.git ../ecommerce_order

      - name: Clonar repositório do Payment
        run: git clone https://github.com/angelodrigues/ecommerce_payment.git ../ecommerce_payment

      - name: Clonar repositório do User
        run: git clone https://github.com/AnaClaraNobre/User_Ms.git ../user_ms

      - name: Clonar repositório do Authenticator
        run: git clone https://github.com/AnaClaraNobre/Authenticator-Ms.git ../authenticator

      - name: Instalar todos os MS localmente
        run: |
          cd ../user_ms && mvn install -DskipTests
          cd ../authenticator && mvn install -DskipTests
          cd ../ecommerce_product && mvn install -DskipTests
          cd ../ecommerce_order && mvn install -DskipTests
          cd ../ecommerce_payment && mvn install -DskipTests
          cd ../Middleware_ms

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build com Maven
        run: mvn clean package -DskipTests

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build da imagem Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/middleware_ms:latest .

      - name: Push da imagem Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/middleware_ms:latest

      - name: Deploy na EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Criando rede ecommerce-net (se não existir)..."
            docker network inspect ecommerce-net >/dev/null 2>&1 || docker network create ecommerce-net

            echo "Parando containers que usam a porta 8090..."
            docker ps --filter "publish=8090" --format "{{.ID}}" | xargs -r docker stop

            echo "Removendo containers com nome middlewarems ou que usavam porta 8090..."
            docker ps -a --filter "name=middlewarems" --format "{{.ID}}" | xargs -r docker rm -f
            docker ps -a --filter "publish=8090" --format "{{.ID}}" | xargs -r docker rm -f

            echo "Puxando nova imagem..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/middleware_ms:latest

            echo "Monitorando recursos ANTES do deploy:"
            docker stats --no-stream
            free -h

            echo "Subindo container principal (middlewarems)..."
            docker run -d --name middlewarems -p 8090:8090 --network ecommerce-net ${{ secrets.DOCKER_USERNAME }}/middleware_ms:latest
            sleep 5

            echo "Monitorando recursos APÓS o deploy:"
            docker stats --no-stream
            free -h
